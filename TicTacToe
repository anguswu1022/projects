board = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

current_player = "O"
ongoing_game = True
winner = None

# Creates a list of valid positions
valid_str = []
for i in range(1, 10):
    valid_str.append(str(i))


# Displays board
def print_board():
    print(board[0] + " " + board[1] + " " + board[2])
    print(board[3] + " " + board[4] + " " + board[5])
    print(board[6] + " " + board[7] + " " + board[8])


# Prompts the player to enter the position they want
def player_turn(player):
    print("Player " + player + "'s turn")

    # Checks if the entered position is valid
    while True:
        pos = input("Enter a position from 1-9: ")
        if pos not in valid_str:
            print("Invalid value. Enter a position from 1-9: ")
        else:
            pos = int(pos)
            break

    # Checks if the input was repeated
    if board[pos - 1] == "-":
        board[pos - 1] = player
    else:
        switch_player()
        print("Position already filled, try again.")

    print_board()


# Checks for a horizontal win
def check_horizontal():
    global ongoing_game
    if board[0] == board[1] == board[2] != "-":
        ongoing_game = False
        return board[0]
    elif board[3] == board[4] == board[5] != "-":
        ongoing_game = False
        return board[3]
    elif board[6] == board[7] == board[8] != "-":
        ongoing_game = False
        return board[6]
    else:
        return


# Checks for a vertical win
def check_vertical():
    global ongoing_game
    if board[0] == board[3] == board[6] != "-":
        ongoing_game = False
        return board[0]
    elif board[1] == board[4] == board[7] != "-":
        ongoing_game = False
        return board[1]
    elif board[2] == board[5] == board[8] != "-":
        ongoing_game = False
        return board[2]
    else:
        return


# Checks for a diagonal win
def check_diagonal():
    global ongoing_game
    if board[0] == board[4] == board[8] != "-":
        ongoing_game = False
        return board[0]
    elif board[2] == board[4] == board[6] != "-":
        ongoing_game = False
        return board[2]
    else:
        return


# Checks for a win
def check_win():
    global winner
    horizontal_winner = check_horizontal()
    vertical_winner = check_vertical()
    diagonal_winner = check_diagonal()
    if horizontal_winner:
        winner = horizontal_winner
    elif vertical_winner:
        winner = vertical_winner
    elif diagonal_winner:
        winner = diagonal_winner
    else:
        winner = None


# Checks for a tie
def check_tie():
    global ongoing_game
    if "-" not in board and winner is None:
        ongoing_game = False
    else:
        return


# Switches the players
def switch_player():
    global current_player
    if current_player == "O":
        current_player = "X"
    else:
        current_player = "O"


def game_state():
    check_win()
    check_tie()


def tictactoe():
    print_board()

    while ongoing_game:
        player_turn(current_player)
        switch_player()
        game_state()

    if winner == "O" or winner == "X":
        print("Player " + winner + " is the winner.")
    elif winner is None:
        print("The game was a tie.")


tictactoe()
